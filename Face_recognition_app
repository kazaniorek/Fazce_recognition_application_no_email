import face_recognition  # Importing face recognition library
import os
import sys
import cv2  # Importing OpenCV library
import numpy as np
import math
import time
import pandas as pd


# Calculating confidence of recognition
def recognition_confidence(face_distance, face_match_threshold=0.6):
    # Calculate the range between 1.0 and the face match threshold
    range = (1.0 - face_match_threshold)
    # Compute a linear confidence value between 0 and 1 based on the face distance
    linear_val = (1.0 - face_distance) / (range * 2.0)

    if face_distance > face_match_threshold:
        # If the face distance is greater than the face match threshold and return the linear value as a percentage
        return str(round(linear_val * 100, 2)) + '%'
    else:
        # If the face distance is less than or equal to the face match threshold
        # apply a non-linear transformation to the linear value
        # and return the result as a percentage
        value = (linear_val + ((1.0 - linear_val) * math.pow((linear_val - 0.5) * 2, 0.2))) * 100
        return str(round(value, 2)) + '%'


# Class  FaceRecognition with it definition and methods
class FaceRecognition:
    face_locations = []
    face_encodings = []
    face_names = []
    known_face_encodings = []
    known_face_names = []
    process_current_frame = True

    def __init__(self):
        # Instantiating the methods
        # Call the encode_faces method to load the known faces from the "faces" directory and compute their encodings
        self.encoding_faces()
        # Create a "recognised_faces" directory to store snapshots of recognised faces
        self.create_recognised_faces_folder()
        # Create an "unknown_faces" directory to store snapshots of unrecognized faces
        self.create_unknown_faces_folder()

    def encoding_faces(self):
        # Iterate over all the images in the "faces" directory
        for image in os.listdir('faces'):
            # Load the face image using face_recognition library
            face_image = face_recognition.load_image_file(f"faces/{image}")
            # Compute the face encoding using face_recognition library
            face_encoding = face_recognition.face_encodings(face_image)[0]

            # Add the face encoding and name to the known face encodings and names lists, respectively
            self.known_face_encodings.append(face_encoding)
            self.known_face_names.append(image)
        # Print the list of known face names
        print(self.known_face_names)

    def create_recognised_faces_folder(self):
        # Create a "recognised_faces" directory if it does not exist
        if not os.path.exists('recognised_faces'):
            os.makedirs('recognised_faces')

    def create_unknown_faces_folder(self):
        # Create an "unknown_faces" directory if it does not exist
        if not os.path.exists('unknown_faces'):
            os.makedirs('unknown_faces')

    def run_face_recognition(self):
        # Open the video capture device (webcam)
        video_capture = cv2.VideoCapture(0)

        # If the video capture device is not opened, exit the program
        if not video_capture.isOpened():
            sys.exit('Video source not found...')

        while True:
            # Read a frame from the video capture device
            ret, frame = video_capture.read()

            # Only process every other frame of video to save time
            if self.process_current_frame:
                # Resize frame of video to 1/4 size for faster face recognition processing
                small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)

                # Convert the image from BGR color (which OpenCV uses) to RGB color (which face_recognition uses)
                rgb_small_frame = small_frame[:, :, ::-1]

                # Finding all the faces and face encodings in the current frame of video
                self.face_locations = face_recognition.face_locations(rgb_small_frame)
                self.face_encodings = face_recognition.face_encodings(rgb_small_frame, self.face_locations)

                self.face_names = []
                for face_encoding in self.face_encodings:
                    # See if the face is a match for the known face(s)
                    matches = face_recognition.compare_faces(self.known_face_encodings, face_encoding)
                    name = "Unknown"
                    confidence = '???'

                    # Calculate the shortest distance between database picture to presented face
                    face_distances = face_recognition.face_distance(self.known_face_encodings, face_encoding)

                    best_match_index = np.argmin(face_distances)
                    if matches[best_match_index]:
                        name = self.known_face_names[best_match_index]
                        confidence = recognition_confidence(face_distances[best_match_index])

                        # Save a snapshot of the recognized face in the "recognised_faces" folder
                        cv2.imwrite(f'recognised_faces/{name}.jpg', frame)
                    else:
                        # Save a snapshot of the unrecognized face in the "unknown_faces" folder
                        stamp = pd.Timestamp.now().to_period('S')  # Adding time stamp
                        stamp.to_timestamp().strftime('%d-%m-%Y_%H-%M-%S')
                        c_time = stamp.to_timestamp().strftime(
                            '%d-%m-%Y_%H-%M-%S')  # Setting up date format(current time)
                        cv2.imwrite(f'unknown_faces/Unknown_face {c_time}.jpg', frame)

                    self.face_names.append(f'{name} ({confidence})')

            self.process_current_frame = not self.process_current_frame

            # Display the result and percentage of confidence detection.
            for (top, right, bottom, left), name in zip(self.face_locations, self.face_names):
                # Scale up face locations in the frame (scaled to 1/4 size)
                top *= 3
                right *= 4
                bottom *= 5
                left *= 4

                # Frame with the name
                cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
                cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 255, 0), cv2.FILLED)
                cv2.putText(frame, name, (left + 6, bottom - 6), cv2.FONT_HERSHEY_DUPLEX, 0.8, (255, 255, 255), 1)

            # Displaying the resulting image with frame
            cv2.imshow('Face Recognition', frame)

            # Pressing 'q'  button on the keyboard to quit the infinite loop!
            if cv2.waitKey(1) == ord('q'):
                break

        # Release handle to the webcam
        video_capture.release()
        cv2.destroyAllWindows()


# The entry point of the program responsible for running the face recognition application.
if __name__ == '__main__':
    fr = FaceRecognition()
    fr.run_face_recognition()
